{
  "categories": [],
  "content": "How to build a new comet extension ",
  "created": "2023-03-08T23:11:00.545Z",
  "guideIntegrations": {
    "discordRoleIds": []
  },
  "guideType": "course",
  "key": "build-comet-extension-compound",
  "name": "Build Comet Extension",
  "publishStatus": "Live",
  "showIncorrectOnCompletion": true,
  "steps": [
    {
      "content": "## Extensions\nCompound III, has launched a new feature called \"Extensions\". This feature is designed to allow community developers to create optional add-ons that can be used to enhance the Compound experience for users.\n\nWhen a user enables an extension, it can leverage Compound III's advanced account management functionality to add new features to their account. These can include automation, position management, and composability with other DeFi protocols. Alternatively, an extension can run without requiring any permissions and simply provide useful information like liquidation alerts.\n\n## Extension Types\nThere are two types of extensions: \n1. Web Extensions - Web extensions are like mini-websites that are embedded into the Compound III interface, allowing users to interact with the platform in new and different ways \n2. Operators - Operators, on the other hand, are smart contracts that allow users to do things like move positions from other DeFi platforms to Compound III. \n\nSome extensions have both a web extension and an operator, while others have only one or the other.",
      "name": "Introduction",
      "stepItems": [],
      "uuid": "33b6802d-f3ed-4dd3-a548-5c6b8b480431"
    },
    {
      "content": "Web Extensions are used to expand the functionality of the Frontend by allowing users to perform actions or retrieve information related to their accounts. \n\nThese extensions are incorporated into the main Compound III app as iframes, but the inner window of the iframe lacks access to the web3 context required for signing messages or transactions when interacting with smart contracts. To overcome this limitation, the Web Extension sends a message to the parent window, which then uses the context and forwards the message. `@compound-finance/comet-extension` provides all the glue code needed to interact with the parent window.\n\n```javascript\nimport { useMemo, useEffect } from 'react';\nimport { RPC, buildRPC } from '@compound-finance/comet-extension';\n\nexport function useRPC(): RPC {\n  let rpc = useMemo<RPC>(buildRPC, []);\n\n  useEffect(() => {\n    rpc.attachHandler()\n    return rpc.detachHandler;\n  }, [rpc]);\n\n  return rpc;\n}\n\n```\n\nCompound also provides an extension template which has all the setup code along with the latest frameworks needed to create a frontend application.\n\nTo develop a Comet Web Extension, the first step is for the developer to clone the template repository's boilerplate onto their local machine. Using Foundry and Vite, they can then construct the Extension's front end and smart contracts while leveraging a localhost development environment to ensure the code functions as intended.",
      "name": "Web Extensions",
      "stepItems": [],
      "uuid": "7d7413e7-3855-499c-b961-d7d4920a4b0e"
    },
    {
      "content": "",
      "name": "Your Info",
      "stepItems": [
        {
          "label": "Nickname",
          "required": true,
          "type": "PublicShortInput",
          "uuid": "caabf5cd-31ca-4f14-a955-a44043bd63cb"
        }
      ],
      "uuid": "5c13563b-bf63-4431-aa8a-a10e07dfc874"
    }
  ],
  "thumbnail": "https://d31h13bdjwgzxs.cloudfront.net/academy/compound/build_comet_extension.png",
  "uuid": "build-comet-extension-compound"
}