categories: []
content: Learn from the projects that are built on top of Compound
created: '2023-03-14T21:17:07.163Z'
guideIntegrations:
  discordRoleIds: []
guideType: course
key: develop-on-compound-compound
name: Develop on Compound
publishStatus: Live
showIncorrectOnCompletion: true
steps:
  - content: >-
      ## Compound III

      Compound III is a specialized protocol that aims to achieve greater
      capital efficiency in DeFi by allowing users to supply volatile assets and
      borrow a single stable asset. This approach is intended to reduce gas
      costs and increase capital efficiency. The Compound III Smart Contracts or
      Coment repository uses a business source license, which Compound
      governance can grant usage to, as it sees fit, by making changes to
      compound-community-licenses.eth, a new ENS domain owned by the community.


      ## Compound Grants Program (CGP)

      Compound is encouraging developers to collaborate and build on top of the
      new Compound III code base through the Compound Grants Program. This
      program is designed to promote composability and facilitate the
      development of new features and functionality related to Compound III. The
      primary objectives of the program are to expand Compound's grant program,
      delegate capital allocation to members of the community, and strengthen
      the builder community during bear market conditions.


      ## CGP 2.0 Details

      CGP 2.0 is a specific program within the Compound Grants Program that
      focuses on getting the community to participate in the process of
      delegating capital allocation. The program disburses $800K (22087.24 COMP)
      through 4 domain allocators, who are experts in their specific domains and
      involved in the Compound community. Each domain allocator runs their
      respective grants program on-chain for full transparency using Questbook.
      The disbursement of the grant happens on-chain from a multi-sig wallet
      controlled by the program manager & the domain allocator. The program
      manager will coordinate with the compound community to ensure that the
      application is aligned with the Compound growth before signing the
      disbursal, while the domain allocator approves or rejects the application
      based on their evaluation.
    name: Introduction
    stepItems: []
    uuid: afa31391-4f45-4d9a-a101-c4a381270913
  - content: >-
      Here are some simple Supply and Borrow examples which show how easy it to
      work with Comet Smart Contracts


      ## Supply


      ```javascript
          const provider = new ethers.providers.JsonRpcProvider(jsonRpcUrl);
          const signer = provider.getSigner(me);
          const comet = new ethers.Contract(cometAddress, cometAbi, signer);
          const weth = new ethers.Contract(wethAddress, wethAbi, signer);
          const wethMantissa = 1e18; // WETH and ETH have 18 decimal places

          let tx = await weth.deposit({ value: ethers.utils.parseEther('10') });
          await tx.wait(1);

          console.log('\tApproving Comet to move WETH collateral...');
          tx = await weth.approve(cometAddress, ethers.constants.MaxUint256);
          await tx.wait(1);

          console.log('\tSending initial supply to Compound...');
          tx = await comet.supply(wethAddress, ethers.utils.parseEther('10'));
          await tx.wait(1);

          let collateralBalance = await comet.callStatic.collateralBalanceOf(me, wethAddress);
          console.log('\tMy current WETH collateral balance:', +collateralBalance.toString() / wethMantissa);
      ```


      ## Borrow

      ```javascript
          const provider = new ethers.providers.JsonRpcProvider(jsonRpcUrl);
          const signer = provider.getSigner(me);
          const comet = new ethers.Contract(cometAddress, cometAbi, signer);
          const weth = new ethers.Contract(wethAddress, wethAbi, signer);
          const wethMantissa = 1e18; // WETH and ETH have 18 decimal places
          const usdc = new ethers.Contract(baseAssetAddress, stdErc20Abi, signer);
          const baseAssetMantissa = 1e6; // USDC has 6 decimal places

          let tx = await weth.deposit({ value: ethers.utils.parseEther('10') });
          await tx.wait(1);

          console.log('\tApproving Comet to move WETH collateral...');
          tx = await weth.approve(cometAddress, ethers.constants.MaxUint256);
          await tx.wait(1);

          console.log('\tSending initial WETH supply of collateral to Compound...');
          tx = await comet.supply(wethAddress, ethers.utils.parseEther('10'));
          await tx.wait(1);

          // Accounts cannot hold a borrow smaller than baseBorrowMin (100 USDC).
          const borrowSize = 1000;
          console.log('\tExecuting initial borrow of the base asset from Compound...');
          console.log('\tBorrow size:', borrowSize);

          tx = await comet.withdraw(usdcAddress, (borrowSize * baseAssetMantissa).toString());
          await tx.wait(1);

          let bal = await usdc.callStatic.balanceOf(me);
          console.log('\tMy current base asset balance:', +bal.toString() / baseAssetMantissa);
      ```
    name: Code Examples
    stepItems: []
    uuid: 7b4eccfc-3676-410d-9a11-65fc72f4f4ae
  - content: ''
    name: Your Info
    stepItems:
      - label: Nickname
        required: true
        type: PublicShortInput
        uuid: a36a2e1c-faef-4d88-8743-4f329cc3447b
    uuid: 177abe31-cc74-4c1e-a13d-ebf1bac70f13
thumbnail: >-
  https://d31h13bdjwgzxs.cloudfront.net/academy/compound/developing_on_compound.png
uuid: develop-on-compound-compound
